// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;
using UnityEngine.Networking;
using System.Collections.Generic;

namespace AssemblyCSharp
{
    public class LPC_GameServer : MonoBehaviour
    {
        private LPC_GameServer()
        {
        }

        private static GameObject s_LPC_GameServer_object;
        private static LPC_GameServer s_LPC_GameServer = null;
        private static NetworkView s_LPC_NetworkView = null;

        public static LPC_GameServer DefaultServer
        {
            get
            {
                if (s_LPC_GameServer == null)
                {
                    s_LPC_GameServer_object = new GameObject("DefaultServer");
                    s_LPC_GameServer = s_LPC_GameServer_object.AddComponent<LPC_GameServer>();
                    s_LPC_NetworkView = s_LPC_GameServer_object.AddComponent<NetworkView>();
                }

                return s_LPC_GameServer;
            }
        }

        public static NetworkView DefalutNetworkView
        {
            get
            {
                return s_LPC_NetworkView;
            }
        }


        /// <summary>
        /// init server...
        /// </summary>
        /// <param name="ip">Ip.</param>
        /// <param name="port">Port.</param>
        public bool InitServer(string ip, int port)
        {
            //set property
            MasterServer.ipAddress = ip;
            MasterServer.port = port;

            return true;
        }

        /// <summary>
        /// Starts the server.
        /// </summary>
        /// <returns><c>true</c>, if server was started, <c>false</c> otherwise.</returns>
        public bool StartServer()
        {
            //start server Note! connections para must -1, as server is one not included
            Network.InitializeServer(Tags.PlayerLimit - 1, 25000, !Network.HavePublicAddress());

            return true;
        }

        public bool RegisterHost(string gameType, string gameName)
        {
            //register a game
            MasterServer.RegisterHost(gameType, gameName);

            return true;
        }

        public delegate void RequestRoomComplete(HostData[] list);
        private RequestRoomComplete complete_block = null;
        public RequestRoomComplete CompleteBlock
        {
            set
            {
                complete_block = value;
            }
            get
            {
                return complete_block;
            }
        }

        public void StartRequestRoom(RequestRoomComplete block, string gameTypeName)
        {
            LPC_GameServer.DefaultServer.CompleteBlock = block;

            MasterServer.RequestHostList(gameTypeName);
        }


        public delegate void JoinHostRoomDelegate(int state);

        private JoinHostRoomDelegate join_delegate = null;
        public void JoinHostRoom(HostData room, JoinHostRoomDelegate block)
        {
            this.join_delegate = block;

            NetworkConnectionError error = Network.Connect(room.ip[0], room.port);

            DebugManager.DefaultManager.Log(error);
        }

        public void SendGameMessage(string message)
        {
            LPC_GameServer.DefalutNetworkView.RPC("RemoteReceiveMessage", RPCMode.All, message);
        }

        [RPC]
        public void RemoteReceiveMessage(string message)
        {
            DebugManager.DefaultManager.Log(message);
        }

        //==>SERVER: Spawn player's to seat
        private RectTransform[] arrayOfSeatPos;
        GameObject playerPref;
        public void SpawnPlayerToSeat_RPC(int order, string name)
        {
            LPC_GameServer.DefalutNetworkView.RPC("SpawnPlayerToSeat", RPCMode.AllBuffered,
                order, name);
        }
        //ALL
        [RPC]
        private void SpawnPlayerToSeat(int order, string userName)
        {
            arrayOfSeatPos = AppDelegate.DefaultManager.selectCanvas.GetSeatPosS();
            RectTransform seatPos = arrayOfSeatPos[order];
            playerPref = Resources.Load<GameObject>("UI/SelectPlayerItem");
            GameObject go = GameObject.Instantiate(playerPref, seatPos.position,
                Quaternion.identity) as GameObject;
            go.transform.SetParent(seatPos, true);
            SelectPlayerItemView shiv = go.GetComponent<SelectPlayerItemView>();
            shiv.InitItem(userName);
        }

        //==>SERVER: Destroy player when disconnected
        public void DestroyPlayerWhenDisconnected_RPC(int order)
        {
            LPC_GameServer.DefalutNetworkView.RPC("DestroyPlayerWhenDisconnected", RPCMode.AllBuffered, order);
        }
        //ALL
        [RPC]
        private void DestroyPlayerWhenDisconnected(int order)
        {
            RectTransform seatPos = arrayOfSeatPos[order];
            Transform tr = seatPos.GetChild(0);
            if (tr != null)
                GameObject.Destroy(tr.gameObject);
        }

        //==>COMMU: Report info to server
        //Server
        public void GiveAndAskInfoAndSpawnSeat_RPC(NetworkPlayer nPlayer, int order)
        {
            StartCoroutine(CoGiveAndAskInfoAndSpawnSeat(nPlayer, order));
        }
        private IEnumerator CoGiveAndAskInfoAndSpawnSeat(NetworkPlayer nPlayer, int order)
        {
            yield return null;
            DefalutNetworkView.RPC("GiveAndAskInfo", nPlayer, order);
        }
        //Client
        [RPC]
        private void GiveAndAskInfo(int order)
        {
            UserInfo.DefaultUser.Order = order;
            UserInfo.DefaultUser.Troop = order / (Tags.PlayerLimit / Tags.TroopNum);
            DefalutNetworkView.RPC("ReplyInfoAndSpawnSeat", RPCMode.Server, UserInfo.DefaultUser.Name, order);
        }
        //Server
        [RPC]
        private void ReplyInfoAndSpawnSeat(string clientPlayerName, int order)
        {
            MultyController.DefaultCtr.OnlinePlayers[order].Name = clientPlayerName;
            SpawnPlayerToSeat_RPC(order, clientPlayerName);
        }

        //==>CLIENT: Select hero
        //All
        public void TellServerChangeHeroTo_RPC(int order, HeroInfo hero)
        {
            if (Network.isClient)
                DefalutNetworkView.RPC("ReportNewHeroToServer", RPCMode.Server, hero.ID, order);
            else
                ReportNewHeroToServer(hero.ID, order);
        }
        //Server
        [RPC]
        private void ReportNewHeroToServer(int heroId, int order)
        {
            MultyController.DefaultCtr.OnlinePlayers[order].HeroId = heroId;
            DefalutNetworkView.RPC("RefreshPlayersSelectedHero_UI", RPCMode.AllBuffered, heroId, order);
        }
        //All
        [RPC]
        private void RefreshPlayersSelectedHero_UI(int heroId, int order)
        {
            RectTransform changeHero = arrayOfSeatPos[order];
            SelectPlayerItemView spiv = changeHero.GetComponentInChildren<SelectPlayerItemView>();
            //todo Modify change hero's ui
            spiv.ChangeHero(heroId);
        }

        //==>CLIENT: Player ready
        //All
        public void TellServerImReady_RPC(int order)
        {
            if (Network.isClient)
                DefalutNetworkView.RPC("ReportReadyToServer", RPCMode.Server, order);
            else
                ReportReadyToServer(order);
        }
        //Server
        [RPC]
        private void ReportReadyToServer(int order)
        {
            MultyController.DefaultCtr.OnlinePlayers[order].IsReady = true;
            DefalutNetworkView.RPC("RefreshPlayersReady_UI", RPCMode.AllBuffered, order);

            MultyController.DefaultCtr.OnPlayerReady();
        }
        //All
        [RPC]
        private void RefreshPlayersReady_UI(int order)
        {
            RectTransform readyHero = arrayOfSeatPos[order];
            SelectPlayerItemView spiv = readyHero.GetComponentInChildren<SelectPlayerItemView>();
            //todo Modify hero's ready ui
            spiv.Ready();
        }

        //==>SERVER: Start game when all ready
        public void CountDownAndStartIfFinish_RPC(int count)
        {
            DefalutNetworkView.RPC("CountDown_UI", RPCMode.AllBuffered, count);
        }
        //All Start or Stop(count == Tags.StopCountFlag) Count Down
        [RPC]
        private void CountDown_UI(int count)
        {
            AppDelegate.DefaultManager.selectCanvas.CountDown(count);
        }
        public void AutoStartGame_RPC()
        {
            string playersXml = LPC_XMLTool.Serializer(typeof(List<NetworkPlayerInfo>), MultyController.DefaultCtr.OnlinePlayers);
            DefalutNetworkView.RPC("SyncPlayersAndChangeToBattleScene", RPCMode.AllBuffered, playersXml);
        }
        //All Start game
        [RPC]
        private void SyncPlayersAndChangeToBattleScene(string playersXml)
        {
            if(!Network.isServer)
            {
                MultyController.DefaultCtr.OnlinePlayers = 
                    LPC_XMLTool.Deserialize(typeof(List<NetworkPlayerInfo>), playersXml) as List<NetworkPlayerInfo>;
            }
            AppDelegate.DefaultManager.ChangeCanvas(AppDelegate.DefaultManager.selectCanvas, AppDelegate.DefaultManager.battleCanvas);
        }

        #region Behaviour Actions

        /// <summary>
        /// some event notification from master server
        /// </summary>
        /// <param name="ev">Ev.</param>
        public void OnMasterServerEvent(MasterServerEvent ev)
        {
            switch (ev)
            {
                case MasterServerEvent.RegistrationSucceeded:
                    {
                        break;
                    }

                case MasterServerEvent.RegistrationFailedNoServer:
                    {
                        break;
                    }
                case MasterServerEvent.RegistrationFailedGameType:
                    {
                        break;
                    }
                case MasterServerEvent.RegistrationFailedGameName:
                    {
                        break;
                    }
                case MasterServerEvent.HostListReceived:
                    {
                        LPC_GameServer.DefaultServer.CompleteBlock(MasterServer.PollHostList());
                        break;
                    }
                default:
                    break;
            }
        }

        public void OnPlayerConnected(NetworkPlayer player)
        {
            NetworkPlayerInfo npi = new NetworkPlayerInfo();
            if(MultyController.DefaultCtr.DisconnectedPlayerOrders.Count <= 0)
            {
                npi.Order = MultyController.DefaultCtr.OnlinePlayers.Count;
            }
            else
            {
                npi.Order = MultyController.DefaultCtr.DisconnectedPlayerOrders.Dequeue();
            }
            npi.Troop = npi.Order / (Tags.PlayerLimit / Tags.TroopNum);
            npi.NPPlayer = player;
            MultyController.DefaultCtr.OnlinePlayers.Insert(npi.Order, npi);
            GiveAndAskInfoAndSpawnSeat_RPC(npi.NPPlayer, npi.Order);
        }

        public void OnPlayerDisconnected(NetworkPlayer player)
        {
            if (AppDelegate.CurrentStage == GameStage.READY_COUNTING)
                CountDownAndStartIfFinish_RPC(Tags.StopCountFlag);

            if(AppDelegate.CurrentStage == GameStage.SELECT_HERO || AppDelegate.CurrentStage == GameStage.READY_COUNTING)
            {
                NetworkPlayerInfo npi = MultyController.DefaultCtr.OnlinePlayers.Find(p => p.NPPlayer.Equals(player));
                MultyController.DefaultCtr.DisconnectedPlayerOrders.Enqueue(npi.Order);
                DestroyPlayerWhenDisconnected_RPC(npi.Order);
                MultyController.DefaultCtr.OnlinePlayers.Remove(npi);
                npi = null;
            }
        }

        public void OnConnectedToServer()
        {
            this.join_delegate(0);
            DebugManager.DefaultManager.Log("OnConnectedToServer");
        }

        #endregion
    }
}






